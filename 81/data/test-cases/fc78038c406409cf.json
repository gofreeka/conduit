{
  "uid" : "fc78038c406409cf",
  "name" : "test_001_sign_in",
  "fullName" : "tests.test_002#test_001_sign_in",
  "historyId" : "e512625c3f51206ecab78729d383814a",
  "time" : {
    "start" : 1628888174946,
    "stop" : 1628888179957,
    "duration" : 5011
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id",
  "statusTrace" : "def test_001_sign_in():\n    \n        time.sleep(5)\n    \n>       sign_in = driver.find_element_by_xpath(\"//a[@href='#/login']\")\n\ntests/test_002.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:394: in find_element_by_xpath\n    return self.find_element(by=By.XPATH, value=xpath)\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:976: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3333548f70>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"#0 0x558...n#12 0x558aa37d08eb \\\\u003Cunknown>\\\\n#13 0x558aa34f8e70 \\\\u003Cunknown>\\\\n#14 0x7f67cf33f0b3 __libc_start_main\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\n\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:242: InvalidSessionIdException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_002"
  }, {
    "name" : "host",
    "value" : "fv-az74-944"
  }, {
    "name" : "thread",
    "value" : "3804-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_002"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 13,
        "skipped" : 0,
        "passed" : 14,
        "unknown" : 0,
        "total" : 27
      },
      "items" : [ {
        "uid" : "24936a69566a49e",
        "reportUrl" : "https://gofreeka.github.io/conduit/80//#testresult/24936a69566a49e",
        "status" : "passed",
        "time" : {
          "start" : 1628887212215,
          "stop" : 1628887220508,
          "duration" : 8293
        }
      }, {
        "uid" : "36dc3a7cae5688bd",
        "reportUrl" : "https://gofreeka.github.io/conduit/79//#testresult/36dc3a7cae5688bd",
        "status" : "passed",
        "time" : {
          "start" : 1628886666384,
          "stop" : 1628886674662,
          "duration" : 8278
        }
      }, {
        "uid" : "b4c83eed17453789",
        "reportUrl" : "https://gofreeka.github.io/conduit/78//#testresult/b4c83eed17453789",
        "status" : "passed",
        "time" : {
          "start" : 1628877061300,
          "stop" : 1628877069555,
          "duration" : 8255
        }
      }, {
        "uid" : "e9b3b7d54712c640",
        "reportUrl" : "https://gofreeka.github.io/conduit/77//#testresult/e9b3b7d54712c640",
        "status" : "passed",
        "time" : {
          "start" : 1628876618693,
          "stop" : 1628876627015,
          "duration" : 8322
        }
      }, {
        "uid" : "c59fd1de59f56e0c",
        "reportUrl" : "https://gofreeka.github.io/conduit/76//#testresult/c59fd1de59f56e0c",
        "status" : "passed",
        "time" : {
          "start" : 1628875968568,
          "stop" : 1628875976797,
          "duration" : 8229
        }
      }, {
        "uid" : "a4cd1d3e8bedd8cd",
        "reportUrl" : "https://gofreeka.github.io/conduit/75//#testresult/a4cd1d3e8bedd8cd",
        "status" : "passed",
        "time" : {
          "start" : 1628870801716,
          "stop" : 1628870809946,
          "duration" : 8230
        }
      }, {
        "uid" : "6223dd76f567321f",
        "reportUrl" : "https://gofreeka.github.io/conduit/74//#testresult/6223dd76f567321f",
        "status" : "passed",
        "time" : {
          "start" : 1628869945576,
          "stop" : 1628869953865,
          "duration" : 8289
        }
      }, {
        "uid" : "a8c969bfbec7cc2b",
        "reportUrl" : "https://gofreeka.github.io/conduit/73//#testresult/a8c969bfbec7cc2b",
        "status" : "passed",
        "time" : {
          "start" : 1628869196397,
          "stop" : 1628869204633,
          "duration" : 8236
        }
      }, {
        "uid" : "e9b19d494e80a3f4",
        "reportUrl" : "https://gofreeka.github.io/conduit/72//#testresult/e9b19d494e80a3f4",
        "status" : "passed",
        "time" : {
          "start" : 1628868485401,
          "stop" : 1628868493719,
          "duration" : 8318
        }
      }, {
        "uid" : "ebbb2c0d94b7d6bc",
        "reportUrl" : "https://gofreeka.github.io/conduit/71//#testresult/ebbb2c0d94b7d6bc",
        "status" : "passed",
        "time" : {
          "start" : 1628864574539,
          "stop" : 1628864582783,
          "duration" : 8244
        }
      }, {
        "uid" : "5437ab33bb6dde24",
        "reportUrl" : "https://gofreeka.github.io/conduit/70//#testresult/5437ab33bb6dde24",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//a[@href='#/login']\"}\n  (Session info: headless chrome=92.0.4515.131)",
        "time" : {
          "start" : 1628863907875,
          "stop" : 1628863912892,
          "duration" : 5017
        }
      }, {
        "uid" : "765187d608fb31e2",
        "reportUrl" : "https://gofreeka.github.io/conduit/69//#testresult/765187d608fb31e2",
        "status" : "passed",
        "time" : {
          "start" : 1628863131883,
          "stop" : 1628863140180,
          "duration" : 8297
        }
      }, {
        "uid" : "eb94e5921761af04",
        "reportUrl" : "https://gofreeka.github.io/conduit/68//#testresult/eb94e5921761af04",
        "status" : "passed",
        "time" : {
          "start" : 1628861830803,
          "stop" : 1628861839106,
          "duration" : 8303
        }
      }, {
        "uid" : "dc95b8d7ff20780c",
        "reportUrl" : "https://gofreeka.github.io/conduit/67//#testresult/dc95b8d7ff20780c",
        "status" : "passed",
        "time" : {
          "start" : 1628861178518,
          "stop" : 1628861186778,
          "duration" : 8260
        }
      }, {
        "uid" : "1abb958400330789",
        "reportUrl" : "https://gofreeka.github.io/conduit/66//#testresult/1abb958400330789",
        "status" : "passed",
        "time" : {
          "start" : 1628858115677,
          "stop" : 1628858123928,
          "duration" : 8251
        }
      }, {
        "uid" : "e6064016d7bac226",
        "reportUrl" : "https://gofreeka.github.io/conduit/65//#testresult/e6064016d7bac226",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//a[@href='#/login']\"}\n  (Session info: headless chrome=92.0.4515.131)",
        "time" : {
          "start" : 1628857119305,
          "stop" : 1628857124325,
          "duration" : 5020
        }
      }, {
        "uid" : "fbb4e23c0f2ee04e",
        "reportUrl" : "https://gofreeka.github.io/conduit/64//#testresult/fbb4e23c0f2ee04e",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//a[@href='#/login']\"}\n  (Session info: headless chrome=92.0.4515.131)",
        "time" : {
          "start" : 1628854902865,
          "stop" : 1628854907884,
          "duration" : 5019
        }
      }, {
        "uid" : "c416aee56d3ca25",
        "reportUrl" : "https://gofreeka.github.io/conduit/63//#testresult/c416aee56d3ca25",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//a[@href='#/login']\"}\n  (Session info: headless chrome=92.0.4515.131)",
        "time" : {
          "start" : 1628854514839,
          "stop" : 1628854519858,
          "duration" : 5019
        }
      }, {
        "uid" : "e2139716d873488b",
        "reportUrl" : "https://gofreeka.github.io/conduit/62//#testresult/e2139716d873488b",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//a[@href='#/login']\"}\n  (Session info: headless chrome=92.0.4515.131)",
        "time" : {
          "start" : 1628853928221,
          "stop" : 1628853933238,
          "duration" : 5017
        }
      }, {
        "uid" : "b3f1762dbea4ec2e",
        "reportUrl" : "https://gofreeka.github.io/conduit/60//#testresult/b3f1762dbea4ec2e",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//a[@href='#/login']\"}\n  (Session info: headless chrome=92.0.4515.131)",
        "time" : {
          "start" : 1628851675771,
          "stop" : 1628851680789,
          "duration" : 5018
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "fc78038c406409cf.json",
  "parameterValues" : [ ]
}